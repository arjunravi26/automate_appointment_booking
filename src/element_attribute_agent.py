import json

from dotenv import load_dotenv
from phi.agent.agent import Agent
from phi.model.groq.groq import Groq

from extract_attribute import find_element_attributes
from plan_steps import plan_steps
from utilities.agent import create_model

load_dotenv()


def map_steps_to_elements(steps: list, element_attributes: list) -> list:
    """
    Map each step (from the appointment booking plan) with its corresponding element
    from the form, determining the element's tag and its most appropriate locator.

    Each mapping in the output JSON array is an object with:
    - 'step': the original step details (action, field, locator, value)
    - 'tag': the HTML tag of the matched element (e.g., 'input', 'select')
    - 'locator': a string representing the best locator (e.g., "id=...", "name=...", "css=...")

    The agent should decide the best match based on attributes such as id, name, class, and placeholder.
    Output should be valid JSON only.
    """
    prompt = (
        f"Given the following JSON array of steps:\n{json.dumps(steps)}\n\n"
        f"and the following JSON array of element attributes extracted from a form:\n{json.dumps(element_attributes)}\n\n"
        "For each step, determine the most appropriate element from the element attributes based on the field name. "
        "Then provide a mapping for each step in the with the corresponding element's HTML tag and the best locator. "
        "The locator should be chosen based on uniqueness, prioritizing the 'id' attribute first, then 'name', then 'class'. "
        "The locator must be in the format that accept by selenium. and ouput loactor as json like by for indicate attribute and value for attribute value"
        "Return a JSON array(not any other things like heading or any other things.) where each element is an object with the keys 'action', 'value', 'required','field_name', 'tag', and 'locator'."
        "Output only valid JSON, without any extra text."
    )
    model = create_model()
    agent = Agent(model=model)
    response = agent.run(prompt)
    print("Agent response:", response.content)
    try:
        mapping = json.loads(response.content)
    except Exception as e:
        print(f"Error parsing JSON from agent response: {e}")
        mapping = []
    print("Mapping result:", mapping)
    return mapping


# Example usage:
if __name__ == "__main__":
    # Example steps from the appointment booking process (normally generated by your LLM agent)
    steps = plan_steps(
        "Book an appointment for John Doe with email john@example.com, phone 1234567890, service Initial Consultation, and insurance number INS12345.")
    print(steps)
    # Example element attributes extracted from a web form
    element_attributes = find_element_attributes()
    print(element_attributes)
    mapping = map_steps_to_elements(steps, element_attributes)
    print("Final Mapping JSON:", json.dumps(mapping, indent=2))
